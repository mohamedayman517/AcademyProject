import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { Router } from '@angular/router';
import { ApiService } from '../../services/api.service';
import { environment } from '../../../environments/environment';
import { AuthService } from '../../services/auth.service';

interface ProjectCard {
  id: string;
  title: string;
  description: string;
  level?: 'مبتدئ' | 'متوسط' | 'متقدم';
  projectNameL1?: string;
  projectNameL2?: string;
  projectStart?: string;
  projectEnd?: string;
  academyDataId?: string;
  branchesDataId?: string;
  projectResources?: File | string;
  projectFile?: File | string;
  // Additional fields from API
  projectId?: string;
  projectDescription?: string;
}

interface Branch {
  id: string;
  branchNameL1?: string;
  branchNameL2?: string;
  name?: string;
}

interface Academy {
  id: string;
  academyNameL1?: string;
  academyNameL2?: string;
  name?: string;
}

@Component({
  selector: 'app-projects',
  templateUrl: './projects.component.html',
  styleUrls: ['./projects.component.css']
})
export class ProjectsComponent implements OnInit {
  heading = 'مشاريع مميزة';
  sub = 'نماذج من المشاريع العملية التي ينجزها المتعلمون خلال البرامج والدورات';

  loading = false;
  error = false;
  projects: ProjectCard[] = [];
  isAdmin = false;
  
  // Form states
  showForm = false;
  editingProject: ProjectCard | null = null;
  isSubmitting = false;
  
  // Data for forms
  branches: Branch[] = [];
  branchesLoading = false;
  branchesError: string | null = null;
  academies: Academy[] = [];
  academiesLoading = false;
  academiesError: string | null = null;
  
  // Form data - matches API specification exactly
  newProject: any = {
    Id: '', // UUID - will be generated by server
    AcademyDataId: '',
    BranchesDataId: '',
    ProjectNameL1: '',
    ProjectNameL2: '',
    ProjectStart: '',
    ProjectEnd: '',
    ProjectResources: null, // File upload
    ProjectFile: null, // File upload
    Description: ''
  };

  constructor(
    private api: ApiService, 
    private router: Router, 
    public auth: AuthService,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.checkAdminStatus();
    this.fetchProjects();
    this.loadBranches();
    this.loadAcademies();
  }

  private checkAdminStatus(): void {
    this.isAdmin = this.auth.isAdmin();
    
    // Subscribe to role changes
    this.auth.roles$.subscribe(roles => {
      this.isAdmin = this.auth.isAdmin();
      this.cdr.detectChanges();
    });
    
    // Subscribe to authentication changes
    this.auth.isAuthenticated$.subscribe(isAuth => {
      this.cdr.detectChanges();
    });
  }

  private fetchProjects(): void {
    this.loading = true;
    this.error = false;

    // المصدر الأساسي: ProjectsMaster (قد يعود items/data/result)
    this.api.getProjectsMaster().subscribe({
      next: (res) => {
        const list = Array.isArray(res) ? res : (res?.items || res?.data || res?.result || []);
        this.projects = Array.isArray(list) ? list.map((p: any) => ({
          id: p.id || p.projectId,
          title: p.projectNameL1 || p.projectName || p.title || 'مشروع بدون عنوان',
          description: p.description || p.projectDescription || '',
          level: (p.level === 'مبتدئ' || p.level === 'متوسط' || p.level === 'متقدم') ? p.level : 'متوسط',
          projectNameL1: p.projectNameL1,
          projectNameL2: p.projectNameL2,
          projectStart: p.projectStart,
          projectEnd: p.projectEnd,
          academyDataId: p.academyDataId,
          branchesDataId: p.branchesDataId,
          projectResources: p.projectResources,
          projectFile: p.projectFile,
          projectId: p.id || p.projectId,
          projectDescription: p.description
        })) : [];

        if (!this.projects.length) {
          // fallback 1: ProjectsDetail
          this.api.getProjectsDetail().subscribe({
            next: (det) => {
              const arr = Array.isArray(det) ? det : (det?.items || det?.data || det?.result || []);
              this.projects = Array.isArray(arr) ? arr.map((p: any) => ({
                id: p.projectId || p.id,
                title: p.projectNameL1 || p.projectName || p.title || 'مشروع بدون عنوان',
                description: p.description || p.projectDescription || '',
                level: (p.level === 'مبتدئ' || p.level === 'متوسط' || p.level === 'متقدم') ? p.level : 'متوسط'
              })) : [];

              if (!this.projects.length) {
                // fallback 2: حسب الأكاديمية إن وُجد
                const academyId = environment.academyId;
                if (academyId) {
                  this.api.getProjectsMasterByAcademy(academyId).subscribe({
                    next: (pm) => {
                      const arr2 = Array.isArray(pm) ? pm : (pm?.items || pm?.data || pm?.result || []);
                      this.projects = Array.isArray(arr2) ? arr2.map((p: any) => ({
                        id: p.projectId || p.id,
                        title: p.projectNameL1 || p.projectName || p.title || 'مشروع بدون عنوان',
                        description: p.description || p.projectDescription || '',
                        level: (p.level === 'مبتدئ' || p.level === 'متوسط' || p.level === 'متقدم') ? p.level : 'متوسط'
                      })) : [];
                    },
                    error: (e) => {},
                    complete: () => { this.loading = false; }
                  });
                  return;
                }
              }
            },
            error: (e) => {},
            complete: () => { this.loading = false; }
          });
          return;
        }
      },
      error: () => { this.error = true; },
      complete: () => { this.loading = false; }
    });
  }

  onPreview(p: ProjectCard): void {
    // TODO: When project has a detail/preview route or URL, navigate/open it.
    // Temporary: navigate to register to encourage signup.
    this.router.navigate(['/register']);
  }

  goRegister(): void {
    this.router.navigate(['/register']);
  }

  // Load branches for form
  private loadBranches(): void {
    this.branchesLoading = true;
    this.branchesError = null;
    
    this.api.getBranchesData().subscribe({
      next: (res) => {
        const branches = Array.isArray(res) ? res : (res?.items || res?.data || res?.result || []);
        this.branches = branches.map((b: any) => ({
          id: b.id || b.branchId,
          branchNameL1: b.branchNameL1 || b.name,
          branchNameL2: b.branchNameL2,
          name: b.branchNameL1 || b.name
        }));
        this.branchesLoading = false;
      },
      error: (err) => {
        this.branchesError = 'فشل تحميل الفروع';
        this.branchesLoading = false;
      }
    });
  }

  // Load academies for form
  private loadAcademies(): void {
    this.academiesLoading = true;
    this.academiesError = null;
    
    this.api.getAcademyData().subscribe({
      next: (res) => {
        const academies = Array.isArray(res) ? res : (res?.items || res?.data || res?.result || []);
        this.academies = academies.map((a: any) => ({
          id: a.id || a.academyId,
          academyNameL1: a.academyNameL1 || a.name,
          academyNameL2: a.academyNameL2,
          name: a.academyNameL1 || a.name
        }));
        this.academiesLoading = false;
      },
      error: (err) => {
        this.academiesError = 'فشل تحميل الأكاديميات';
        this.academiesLoading = false;
      }
    });
  }

  // Get Academy ID from token
  private getAcademyIdFromToken(): string {
    try {
      const token = localStorage.getItem('access_token') || localStorage.getItem('token');
      if (token) {
        const payload = JSON.parse(atob(token.split('.')[1]));
        return payload.AcademyDataId || payload.academyDataId || payload.AcademyId || payload.academyId || '';
      }
    } catch (error) {
      // Failed to parse token for Academy ID
    }
    return '';
  }

  // Open add form
  addProject(): void {
    this.editingProject = null;
    this.newProject = {
      Id: '', // Will be generated by server
      AcademyDataId: this.getAcademyIdFromToken() || (this.academies.length > 0 ? this.academies[0].id : ''),
      BranchesDataId: '',
      ProjectNameL1: '',
      ProjectNameL2: '',
      ProjectStart: '',
      ProjectEnd: '',
      ProjectResources: null,
      ProjectFile: null,
      Description: ''
    };
    this.showForm = true;
    
    // Force change detection
    this.cdr.detectChanges();
  }

  // Open edit form
  editProject(project: ProjectCard): void {
    this.editingProject = project;
    this.newProject = {
      Id: project.id || project.projectId || '',
      AcademyDataId: project.academyDataId || this.getAcademyIdFromToken() || (this.academies.length > 0 ? this.academies[0].id : ''),
      BranchesDataId: project.branchesDataId || '',
      ProjectNameL1: project.projectNameL1 || project.title || '',
      ProjectNameL2: project.projectNameL2 || '',
      ProjectStart: project.projectStart || '',
      ProjectEnd: project.projectEnd || '',
      ProjectResources: project.projectResources || null,
      ProjectFile: project.projectFile || null,
      Description: project.description || project.projectDescription || ''
    };
    this.showForm = true;
  }

  // Save project (create or update)
  saveProject(): void {
    if (!this.validateForm()) {
      return;
    }

    this.isSubmitting = true;
    
    // Clean data - ensure all required fields are present
    const cleanedData = { ...this.newProject };
    
    // Add Academy ID from token if not set
    const academyId = this.getAcademyIdFromToken();
    if (academyId) {
      cleanedData.AcademyDataId = academyId;
    }
    
    // Remove empty string fields but keep null for file fields
    Object.keys(cleanedData).forEach(key => {
      if (cleanedData[key] === '' || cleanedData[key] === undefined) {
        if (key === 'ProjectResources' || key === 'ProjectFile') {
          cleanedData[key] = null;
        } else if (key !== 'AcademyDataId' && key !== 'Id') {
          delete cleanedData[key];
        }
      }
    });

    // For updates, keep the ID
    if (this.editingProject) {
      cleanedData.Id = this.editingProject.id;
    } else {
      // For new projects, remove ID to let server generate it
      delete cleanedData.Id;
    }

    if (this.editingProject) {
      // Update existing project
      this.api.updateProjectsMaster(this.editingProject.id, cleanedData).subscribe({
        next: () => {
          this.showForm = false;
          this.editingProject = null;
          this.fetchProjects();
          this.isSubmitting = false;
        },
        error: (err) => {
          alert('فشل تحديث المشروع: ' + (err.error?.message || err.message || 'خطأ غير معروف'));
          this.isSubmitting = false;
        }
      });
    } else {
      // Create new project
      this.api.createProjectsMaster(cleanedData).subscribe({
        next: () => {
          this.showForm = false;
          this.editingProject = null;
          this.fetchProjects();
          this.isSubmitting = false;
        },
        error: (err) => {
          alert('فشل إنشاء المشروع: ' + (err.error?.message || err.message || 'خطأ غير معروف'));
          this.isSubmitting = false;
        }
      });
    }
  }

  // Validate form
  private validateForm(): boolean {
    if (!this.newProject.ProjectNameL1?.trim()) {
      alert('اسم المشروع بالعربية مطلوب');
      return false;
    }
    if (!this.newProject.BranchesDataId) {
      alert('يرجى اختيار الفرع');
      return false;
    }
    if (!this.newProject.ProjectStart) {
      alert('تاريخ البداية مطلوب');
      return false;
    }
    if (!this.newProject.ProjectEnd) {
      alert('تاريخ النهاية مطلوب');
      return false;
    }
    if (!this.newProject.Description?.trim()) {
      alert('وصف المشروع مطلوب');
      return false;
    }
    return true;
  }

  // Cancel form
  cancelForm(): void {
    this.showForm = false;
    this.editingProject = null;
    this.newProject = {
      Id: '',
      AcademyDataId: '',
      BranchesDataId: '',
      ProjectNameL1: '',
      ProjectNameL2: '',
      ProjectStart: '',
      ProjectEnd: '',
      ProjectResources: null,
      ProjectFile: null,
      Description: ''
    };
  }


  // Handle file selection
  onFileSelected(event: any, fieldName: string): void {
    const file = event.target.files[0];
    if (file) {
      this.newProject[fieldName] = file;
    } else {
      this.newProject[fieldName] = null;
    }
  }

  // Delete project
  deleteProject(project: ProjectCard): void {
    if (!confirm(`هل أنت متأكد من حذف المشروع: ${project.title}؟`)) { 
      return; 
    }
    
    this.loading = true;
    const projectId = project.id || project.projectId;
    if (!projectId) {
      alert('خطأ: لا يمكن تحديد معرف المشروع');
      this.loading = false;
      return;
    }
    
    this.api.deleteProjectsMaster(projectId).subscribe({
      next: () => {
        this.fetchProjects();
        this.loading = false;
      },
      error: (err) => {
        alert('فشل حذف المشروع: ' + (err.error?.message || err.message || 'خطأ غير معروف'));
        this.loading = false;
      }
    });
  }
}
